(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"KZ+V":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return p})),a.d(t,"default",(function(){return g}));var o=a("Fcif"),n=a("+I+c"),l=(a("mXGw"),a("/FXl")),r=a("TjRS"),c=a("aN4c"),s=a("Vkpr"),b=a.n(s),i=a("isvF"),u=a.n(i),p=(a("aD51"),{});void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/__docz__/index.mdx"}});var m={_frontmatter:p},d=r.a;function g(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(l.b)(d,Object(o.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("div",{style:{display:"flex",alignItems:"center"}},Object(l.b)("div",null,Object(l.b)("h1",null,"React Use Window.localStorage")),Object(l.b)("div",null,Object(l.b)("a",{href:"https://github.com/justinmahar/react-use-window-localstorage/",target:"_blank",rel:"noopener noreferrer"},Object(l.b)(c.a,{src:b.a,size:28,style:{margin:"0 0 0 20px"},mdxType:"SvgIcon"})))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"React hooks for accessing the localStorage ",Object(l.b)("a",{parentName:"strong",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API"},"Web Storage API"),".")),Object(l.b)("a",{href:"https://justinmahar.github.io/react-use-window-localstorage/useLocalStorageString#example"},Object(l.b)("img",{src:u.a})),Object(l.b)("p",null,"👁️ ",Object(l.b)("strong",{parentName:"p"},Object(l.b)("a",{parentName:"strong",href:"/react-use-window-localstorage/useLocalStorageString#example"},"Live Demo"))),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"For sessionStorage, see ",Object(l.b)("a",{parentName:"em",href:"https://justinmahar.github.io/react-use-window-sessionstorage"},"react-use-window-sessionstorage"),".")),Object(l.b)("h2",{id:"overview"},"Overview"),Object(l.b)("p",null,"A set of hooks to easily store and retrieve data from ",Object(l.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"},"localStorage"),"."),Object(l.b)("p",null,"Encoding is handled for common data types, including ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageBoolean"},"booleans"),", ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageNumber"},"numbers"),", ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageString"},"strings"),", and ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageObject"},"objects"),", or you can ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageItem"},"encode data yourself")," if you'd like."),Object(l.b)("p",null,"Changes to localStorage are synchronized across all hooks automatically."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("strong",{parentName:"p"},"What is localStorage?")," The ",Object(l.b)("inlineCode",{parentName:"p"},"localStorage")," property allows you to store ",Object(l.b)("inlineCode",{parentName:"p"},"{key: value}")," string data that is saved across browser sessions. Data stored in ",Object(l.b)("inlineCode",{parentName:"p"},"localStorage")," has no expiration time.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"For sessionStorage, check out the companion project ",Object(l.b)("a",{parentName:"p",href:"https://justinmahar.github.io/react-use-window-sessionstorage"},"react-use-window-sessionstorage"),".")),Object(l.b)("h3",{id:"features-include"},"Features include:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"💪 Easily add ",Object(l.b)("inlineCode",{parentName:"strong"},"localStorage")," support"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Store data across browser sessions with ease."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"🔢 Support for primitives and objects"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Store and retrieve strings, booleans, numbers, and objects effortlessly."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"💁 Default values"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Optional support for defaults is baked right in."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"🔄 Automatic synchronization"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Changes are synchronized across hooks automatically."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"👾 Customizable"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Want to store something unusual? Just provide your own encoder."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"⛔ Storage availability detection"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Detects if ",Object(l.b)("inlineCode",{parentName:"li"},"localStorage")," is available for use and lets you know otherwise."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"🧼 Clearing support"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Clear all localStorage values and reset hooks to defaults with one simple call.")))),Object(l.b)("h2",{id:"installation"},"Installation"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"npm i react-use-window-localstorage\n")),Object(l.b)("h2",{id:"quick-start"},"Quick Start"),Object(l.b)("h3",{id:"storing-strings"},"Storing Strings"),Object(l.b)("p",null,"Use the ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageString"},"useLocalStorageString")," hook:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'import { useLocalStorageString } from "react-use-window-localstorage";\n')),Object(l.b)("p",null,"In your function component:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'const defaultValue = "cyan";\nconst [value, setValue] = useLocalStorageString("favColor", defaultValue);\n')),Object(l.b)("h3",{id:"storing-objects"},"Storing Objects"),Object(l.b)("p",null,"Use the ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageObject"},"useLocalStorageObject")," hook:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'import { useLocalStorageObject } from "react-use-window-localstorage";\n')),Object(l.b)("p",null,"In your function component:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'const defaultValue = { a: "hello", b: 123 };\nconst [value, setValue] = useLocalStorageObject("myObj", defaultValue);\n')),Object(l.b)("p",null,"Note that your objects must be compatible with ",Object(l.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"},"JSON.stringify()"),". Use ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageItem"},"useLocalStorageItem")," otherwise."),Object(l.b)("h3",{id:"storing-booleans"},"Storing Booleans"),Object(l.b)("p",null,"Use the ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageBoolean"},"useLocalStorageBoolean")," hook:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'import { useLocalStorageBoolean } from "react-use-window-localstorage";\n')),Object(l.b)("p",null,"In your function component:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'const defaultValue = true;\nconst [value, setValue] = useLocalStorageBoolean("swordEquipped", defaultValue);\n')),Object(l.b)("h3",{id:"storing-numbers"},"Storing Numbers"),Object(l.b)("p",null,"Use the ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageNumber"},"useLocalStorageNumber")," hook:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'import { useLocalStorageNumber } from "react-use-window-localstorage";\n')),Object(l.b)("p",null,"In your function component:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'const defaultValue = 3.14159;\nconst [value, setValue] = useLocalStorageNumber(\n  "importantNumber",\n  defaultValue\n);\n')),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Note: All value defaults are optional. Hooks will return ",Object(l.b)("inlineCode",{parentName:"p"},"null")," if none is provided.")),Object(l.b)("h3",{id:"storing-everything-else"},"Storing Everything Else"),Object(l.b)("p",null,"If you'd like to store something other than the data types above, define your own encoding using the ",Object(l.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageItem"},"useLocalStorageItem")," hook."),Object(l.b)("p",null,"Here's a starting point:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'import { useLocalStorageItem } from "react-use-window-localstorage";\n')),Object(l.b)("p",null,"In your function component:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'const defaultValue = "something custom";\nconst encode = (value) => JSON.stringify(value);\nconst decode = (itemString) => JSON.parse(itemString);\nconst [value, setValue] = useLocalStorageItem(\n  "name",\n  defaultValue,\n  encode,\n  decode\n);\n')),Object(l.b)("p",null,"Provide ",Object(l.b)("inlineCode",{parentName:"p"},"null")," for no default value."),Object(l.b)("h3",{id:"additional-features"},"Additional Features"),Object(l.b)("p",null,"All hooks provide additional features in their return arrays, should you be interested:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'const [value, setValue, loading, available, reset] = useLocalStorageString(\n  "favColor",\n  "cyan"\n);\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("inlineCode",{parentName:"li"},"loading")," value of ",Object(l.b)("inlineCode",{parentName:"li"},"true")," indicates that the value is being loaded from localStorage."),Object(l.b)("li",{parentName:"ul"},"An ",Object(l.b)("inlineCode",{parentName:"li"},"available")," value of ",Object(l.b)("inlineCode",{parentName:"li"},"true")," indicates that ",Object(l.b)("inlineCode",{parentName:"li"},"localStorage")," is supported and available for use."),Object(l.b)("li",{parentName:"ul"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"reset()")," function sets the value back to the provided default, or ",Object(l.b)("inlineCode",{parentName:"li"},"null")," if none was given.")),Object(l.b)("h3",{id:"clearing-localstorage"},"Clearing ",Object(l.b)("inlineCode",{parentName:"h3"},"localStorage")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'import { useClearLocalStorage } from "react-use-window-localstorage";\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"const clearLocalStorage = useClearLocalStorage();\n")),Object(l.b)("p",null,"Call ",Object(l.b)("inlineCode",{parentName:"p"},"clearLocalStorage()")," to clear all values in localStorage using ",Object(l.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"},"localStorage.clear()"),"\nand reset all hooks to their defaults (or ",Object(l.b)("inlineCode",{parentName:"p"},"null")," if none provided)."),Object(l.b)("h2",{id:"typescript"},"TypeScript"),Object(l.b)("p",null,"Type definitions have been included for ",Object(l.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript")," support."),Object(l.b)("h2",{id:"contributing"},"Contributing"),Object(l.b)("p",null,"Open source software is awesome and so are you. 😎"),Object(l.b)("p",null,"Feel free to submit a pull request for bugs or additions, and make sure to update tests as appropriate. If you find a mistake in the docs, send a PR! Even the smallest changes help."),Object(l.b)("p",null,"For major changes, open an issue first to discuss what you'd like to change."),Object(l.b)("p",null,"See ",Object(l.b)("a",{parentName:"p",href:"https://tinyurl.com/kindlingscripts"},"Kindling")," for npm script documentation."),Object(l.b)("h2",{id:"-found-it-helpful-star-it"},"⭐ Found It Helpful? ",Object(l.b)("a",{parentName:"h2",href:"https://github.com/justinmahar/react-use-window-localstorage/stargazers"},"Star It!")),Object(l.b)("p",null,"If you found this project helpful, let the community know by giving it a ",Object(l.b)("a",{parentName:"p",href:"https://github.com/justinmahar/react-use-window-localstorage/stargazers"},"star"),": ",Object(l.b)("a",{parentName:"p",href:"https://github.com/justinmahar/react-use-window-localstorage/stargazers"},"👉⭐")))}void 0!==g&&g&&g===Object(g)&&Object.isExtensible(g)&&!g.hasOwnProperty("__filemeta")&&Object.defineProperty(g,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/__docz__/index.mdx"}}),g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docz-index-mdx-5c5ef1e9577ec49a9782.js.map