(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{pUVx:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return c}));a("1c7q"),a("abGl"),a("gZHo"),a("Fdmb"),a("Ir+3"),a("2mQt");var n=a("/FXl"),l=a("TjRS"),o=a("+OnN");a("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/hooks/useLocalStorageBoolean.mdx"}});var i={_frontmatter:b},d=l.a;function c(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,["components"]);return Object(n.b)(d,r({},i,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",null,"useLocalStorageBoolean"),Object(n.b)("h2",{id:"description"},"Description"),Object(n.b)("p",null,"This hook gets and sets a ",Object(n.b)("inlineCode",{parentName:"p"},"boolean")," in ",Object(n.b)("a",r({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"}),"localStorage"),". "),Object(n.b)("p",null,"Features synchronization across hooks sharing the same key name."),Object(n.b)("h2",{id:"usage"},"Usage"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { useLocalStorageBoolean } from 'react-use-window-localstorage';\n")),Object(n.b)("p",null,"In your function component:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"const [value, setValue] = useLocalStorageBoolean('swordEquipped', true);\n")),Object(n.b)("p",null,"The hook takes a key name and an optional default value argument. The default value will be immediately written to localStorage and returned if no value is present already. Uses ",Object(n.b)("inlineCode",{parentName:"p"},"null")," when no default value is provided."),Object(n.b)("p",null,"Use ",Object(n.b)("inlineCode",{parentName:"p"},"value")," and ",Object(n.b)("inlineCode",{parentName:"p"},"setValue")," to read and write the value."),Object(n.b)("p",null,"Because localStorage accepts strings only, the value is encoded using\n",Object(n.b)("a",r({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"}),Object(n.b)("inlineCode",{parentName:"a"},"JSON.stringify()")),"\nand decoded using ",Object(n.b)("a",r({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"}),Object(n.b)("inlineCode",{parentName:"a"},"JSON.parse()")),"."),Object(n.b)("h3",{id:"additional-features"},"Additional Features"),Object(n.b)("p",null,"The hook provides additional features in its return array, should you be interested:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"const [value, setValue, loading, available, reset, restore] = useLocalStorageBoolean('swordEquipped', true);\n")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"A ",Object(n.b)("inlineCode",{parentName:"li"},"loading")," value of ",Object(n.b)("inlineCode",{parentName:"li"},"true")," indicates that the value is being loaded from localStorage."),Object(n.b)("li",{parentName:"ul"},"An ",Object(n.b)("inlineCode",{parentName:"li"},"available")," value of ",Object(n.b)("inlineCode",{parentName:"li"},"true")," indicates that ",Object(n.b)("inlineCode",{parentName:"li"},"localStorage")," is supported and available for use. "),Object(n.b)("li",{parentName:"ul"},"The ",Object(n.b)("inlineCode",{parentName:"li"},"reset()")," function sets the value back to the provided default, or ",Object(n.b)("inlineCode",{parentName:"li"},"null")," if none was given."),Object(n.b)("li",{parentName:"ul"},"The ",Object(n.b)("inlineCode",{parentName:"li"},"restore()")," function retrieves the latest value from localStorage. Use this if the localStorage value changes outside of this hook and you need to restore it to the latest.")),Object(n.b)("h2",{id:"signature"},"Signature"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"useLocalStorageBoolean(keyName: string, defaultValue?: boolean | null) => [boolean | null, (value: boolean | null) => void, boolean, () => void, () => void]")),Object(n.b)("h3",{id:"props"},"Props"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"Prop"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"Type"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"keyName"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"string")),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"Required.")," Key name to use in localStorage.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"defaultValue"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",Object(n.b)("inlineCode",{parentName:"td"},"null")),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Optional. Provide a default ",Object(n.b)("inlineCode",{parentName:"td"},"boolean")," value when the key's value is not found in localStorage. Will be immediately written to localStorage if not present. Use ",Object(n.b)("inlineCode",{parentName:"td"},"null")," for no default.")))),Object(n.b)("h3",{id:"return"},"Return"),Object(n.b)("p",null,"The hook returns an array containing:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"Index"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"Type"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"0"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"value"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",Object(n.b)("inlineCode",{parentName:"td"},"null")),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The ",Object(n.b)("inlineCode",{parentName:"td"},"boolean")," value from localStorage, when ",Object(n.b)("inlineCode",{parentName:"td"},"loading")," is ",Object(n.b)("inlineCode",{parentName:"td"},"false"),". Will be the default value (or ",Object(n.b)("inlineCode",{parentName:"td"},"null")," if none provided) while loading is ",Object(n.b)("inlineCode",{parentName:"td"},"true"),". If ",Object(n.b)("inlineCode",{parentName:"td"},"null")," when not loading, the key was not found in localStorage.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"1"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"setValue"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"(value: boolean")," ","|"," ",Object(n.b)("inlineCode",{parentName:"td"},"null) => void")),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Sets the value in localStorage. Provide ",Object(n.b)("inlineCode",{parentName:"td"},"null")," to set it back to the default value. Providing ",Object(n.b)("inlineCode",{parentName:"td"},"null")," will delete the key from localStorage if the default value is ",Object(n.b)("inlineCode",{parentName:"td"},"null"),".")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"2"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"loading"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"boolean")),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"true")," while the value loads from localStorage, ",Object(n.b)("inlineCode",{parentName:"td"},"false")," otherwise.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"3"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"available"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"boolean")),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"true")," if localStorage is supported and available for use, ",Object(n.b)("inlineCode",{parentName:"td"},"false")," otherwise.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"4"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"reset"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"() => void")),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Reset the value to the default.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"5"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"restore"),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"() => void")),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Retrieve the latest value from localStorage. Use this if the localStorage value changes outside of this hook and you need to restore it to the latest.")))),Object(n.b)("h2",{id:"example"},"Example"),Object(n.b)("div",{style:{border:"solid 2px #67788a",padding:"20px"}},Object(n.b)(o.a,{mdxType:"UseLocalStorageBooleanExample"})),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import * as React from 'react';\nimport { useLocalStorageBoolean } from 'react-use-window-localstorage';\n\nexport function UseLocalStorageBooleanExample() {\n  const defaultValue = true;\n  const [value, setValue, loading, available, reset] = useLocalStorageBoolean('boolValue', defaultValue);\n  const [value2, setValue2, loading2] = useLocalStorageBoolean('boolValue', defaultValue);\n\n  return (\n    <div>\n      {!loading && (\n        <div>\n          <div>\n            Key \"boolValue\": <button onClick={() => setValue(!value)}>Toggle</button>\n          </div>\n          <div>\n            <strong>Stored value:</strong> {value + ''}\n          </div>\n        </div>\n      )}\n      <div>\n        <button onClick={() => reset()}>Reset \"boolValue\" to default</button>\n      </div>\n      <hr />\n      {!loading2 && <div>Another \"boolValue\" hook (different hook, will synchronize): {value2 + ''}</div>}\n    </div>\n  );\n}\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/hooks/useLocalStorageBoolean.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-hooks-use-local-storage-boolean-mdx-a2e34c6fe229226ba35b.js.map