(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"0cv9":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return i})),a.d(t,"default",(function(){return s}));var n=a("Fcif"),l=a("+I+c"),r=(a("mXGw"),a("/FXl")),o=a("TjRS"),b=a("ENdB"),i=(a("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/hooks/useLocalStorageItem.mdx"}});var c={_frontmatter:i},d=o.a;function s(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(r.b)(d,Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",null,"useLocalStorageItem"),Object(r.b)("h2",{id:"description"},"Description"),Object(r.b)("p",null,"This hook gets and sets an item in ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"},"localStorage")," using the provided encode and decode functions."),Object(r.b)("p",null,"Features synchronization across hooks sharing the same key name."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Hooks for ",Object(r.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageBoolean"},"boolean"),", ",Object(r.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageNumber"},"number"),", and ",Object(r.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageString"},"string")," primitives are available. There is also a ",Object(r.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageObject"},"hook for objects")," that uses ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"},"JSON string encoding"),".")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"import { useLocalStorageItem } from 'react-use-window-localstorage';\n")),Object(r.b)("p",null,"In your function component:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"const encode = value => JSON.stringify(value);\nconst decode = itemString => JSON.parse(itemString);\nconst [value, setValue] = useLocalStorageItem('name', 'Zelda', encode, decode);\n")),Object(r.b)("p",null,"The hook takes a key name and a default value argument, which should be ",Object(r.b)("inlineCode",{parentName:"p"},"null")," when no default value is desired. When not ",Object(r.b)("inlineCode",{parentName:"p"},"null"),", the default value will be immediately written to localStorage and returned if no value is present already."),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"value")," and ",Object(r.b)("inlineCode",{parentName:"p"},"setValue")," to read and write the value."),Object(r.b)("p",null,"Because localStorage accepts strings only, the value must be encoded and decoded as such using the encode and decode functions you provide."),Object(r.b)("h3",{id:"additional-features"},"Additional Features"),Object(r.b)("p",null,"The hook provides additional features in its return array, should you be interested:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"const [value, setValue, loading, available, reset] = useLocalStorageItem('name', 'Zelda', encode, decode);\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A ",Object(r.b)("inlineCode",{parentName:"li"},"loading")," value of ",Object(r.b)("inlineCode",{parentName:"li"},"true")," indicates that the value is being loaded from localStorage."),Object(r.b)("li",{parentName:"ul"},"An ",Object(r.b)("inlineCode",{parentName:"li"},"available")," value of ",Object(r.b)("inlineCode",{parentName:"li"},"true")," indicates that ",Object(r.b)("inlineCode",{parentName:"li"},"localStorage")," is supported and available for use. "),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"reset()")," function sets the value back to the provided default, or ",Object(r.b)("inlineCode",{parentName:"li"},"null")," if none was given.")),Object(r.b)("h2",{id:"signature"},"Signature"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"useLocalStorageItem(keyName: string, defaultValue: any | null, encode: (val: any | null) => string, decode: (itemString: string | null) => any | null) => [any | null, (value: any | null) => void, boolean, () => void, () => void]")),Object(r.b)("h3",{id:"props"},"Props"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Prop"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"keyName"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"string")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},"Required.")," Key name to use in localStorage.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"defaultValue"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"any")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"null")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},"Required.")," Provide a default value when the key's value is not found in localStorage. Will be immediately written to localStorage if not present. Use ",Object(r.b)("inlineCode",{parentName:"td"},"null")," for no default.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"encode"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"(value: any) => string")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},"Required.")," Encode function for the value. Since localStorage uses strings only, all values must be encoded to a string.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"decode"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"(itemString: string) => any")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},"Required.")," Encode function for the item string in localStorage. Since localStorage uses strings only, all values must be decoded from a string.")))),Object(r.b)("h3",{id:"return"},"Return"),Object(r.b)("p",null,"The hook returns an array containing:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Index"),Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"0"),Object(r.b)("td",{parentName:"tr",align:null},"value"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"any")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"null")),Object(r.b)("td",{parentName:"tr",align:null},"The value from localStorage, when ",Object(r.b)("inlineCode",{parentName:"td"},"loading")," is ",Object(r.b)("inlineCode",{parentName:"td"},"false"),". Will be the default value (or ",Object(r.b)("inlineCode",{parentName:"td"},"null")," if none provided) while loading is ",Object(r.b)("inlineCode",{parentName:"td"},"true"),". If ",Object(r.b)("inlineCode",{parentName:"td"},"null")," when not loading, the key was not found in localStorage.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"1"),Object(r.b)("td",{parentName:"tr",align:null},"setValue"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"(value: any")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"null) => void")),Object(r.b)("td",{parentName:"tr",align:null},"Sets the value in localStorage. Provide ",Object(r.b)("inlineCode",{parentName:"td"},"null")," to set it back to the default value. Providing ",Object(r.b)("inlineCode",{parentName:"td"},"null")," will delete the key from localStorage if the default value is ",Object(r.b)("inlineCode",{parentName:"td"},"null"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"2"),Object(r.b)("td",{parentName:"tr",align:null},"loading"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"true")," while the value loads from localStorage, ",Object(r.b)("inlineCode",{parentName:"td"},"false")," otherwise.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"3"),Object(r.b)("td",{parentName:"tr",align:null},"available"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"boolean")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"true")," if localStorage is supported and available for use, ",Object(r.b)("inlineCode",{parentName:"td"},"false")," otherwise.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"4"),Object(r.b)("td",{parentName:"tr",align:null},"reset"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"() => void")),Object(r.b)("td",{parentName:"tr",align:null},"Reset the value to the default.")))),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"The following example demonstrates a localStorage item with the key name ",Object(r.b)("inlineCode",{parentName:"p"},"nameObj")," and default ",Object(r.b)("inlineCode",{parentName:"p"},'{ name: "Zelda" }')," that uses\n",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"},Object(r.b)("inlineCode",{parentName:"a"},"JSON.stringify()")),"\nand ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"},Object(r.b)("inlineCode",{parentName:"a"},"JSON.parse()"))," to\nconvert the object to and from a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," for use in localStorage (the same can be accomplished using ",Object(r.b)("a",{parentName:"p",href:"/react-use-window-localstorage/useLocalStorageObject"},"useLocalStorageObject"),")."),Object(r.b)("p",null,"A second hook with the same key name is shown as well. This hook will synchronize with the first one when changed."),Object(r.b)("div",{style:{border:"solid 2px #67788a",padding:"20px"}},Object(r.b)(b.a,{mdxType:"UseLocalStorageItemExample"})),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { useLocalStorageItem } from 'react-use-window-localstorage';\n\nexport function UseLocalStorageItemExample() {\n  const defaultNameObject = { name: 'Zelda' };\n  const [enteredFirstName, setEnteredFirstName] = React.useState('');\n  const enteredNameObject = { name: enteredFirstName };\n  const encode = value => JSON.stringify(value);\n  const decode = itemString => JSON.parse(itemString);\n  const [nameObject, setNameObject, loading, available, reset] = useLocalStorageItem('nameObj', defaultNameObject, encode, decode);\n  const [nameObject2, setNameObject2, loading2] = useLocalStorageItem('nameObj', defaultNameObject, encode, decode);\n\n  return (\n    <div>\n      {!loading && (\n        <div>\n          <div>\n            Key \"nameObj\":{' { name: '}\n            <input\n              type=\"text\"\n              value={enteredFirstName}\n              onChange={e => setEnteredFirstName(e.target.value)}\n              onKeyPress={e => e.key === 'Enter' && setNameObject(enteredNameObject)}\n            />\n            {' } '}\n            <button onClick={() => setNameObject(enteredNameObject)}>Set</button>\n          </div>\n          <div>\n            <strong>Stored name:</strong> {JSON.stringify(nameObject)}\n          </div>\n        </div>\n      )}\n      <div>\n        <button onClick={() => reset()}>Reset \"nameObj\" to default</button>\n      </div>\n      <hr />\n      {!loading2 && <div>Another \"nameObj\" hook (different hook, will synchronize): {JSON.stringify(nameObject)}</div>}\n    </div>\n  );\n}\n")))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/hooks/useLocalStorageItem.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-hooks-use-local-storage-item-mdx-d218b1a3b03c7c47476d.js.map